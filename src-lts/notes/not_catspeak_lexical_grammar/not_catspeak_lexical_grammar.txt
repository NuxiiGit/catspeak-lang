Catspeak source code is stored as a sequence of Unicode characters using
UTF-8 encoding. This means that most text rendered in the GameMaker IDE or
an external text editor will be interpreted as individual characters. Unicode
character clusters (such as skin tone emojis) are an exception to this, and
are instead interpreted as multiple characters, depending on the size of the
cluster.

In order for the computer to understand what these characters mean, they first
need to be transformed into larger groups of characters called [tokens](https://en.wikipedia.org/wiki/Lexical_analysis#Lexical_token_and_lexical_tokenization).
The following sections will cover what each of these tokens are, and how they
are parsed.

# Numbers

Simple numbers (or "numeric literals") are a sequence of ASCII digits (`0&#8209;9`),
optionally separated by a single decimal point:
```
1234567890
3.1415
```

Numbers may also contain underscores (`_`).

# Binary Numbers

TODO

# Hexadecimal Numbers

TODO

# Character Codes

TODO

# Colour Codes

TODO

# Text (Strings)

TODO

# Whitespace

For the most part Catspeak is whitespace insensitive, ignoring any of the
following characters:

 - **Character tabulation** `'\t'` (U+0009)
 - **Line feed**            `'\n'` (U+000A)
 - **Line tabulation**      `'\v'` (U+000B)
 - **Form feed**            `'\f'` (U+000C)
 - **Carriage return**      `'\r'` (U+000D)
 - **Space**                       (U+0020)
 - **Next Line**                   (U+0085)

[Comments](#comments) are also ignored by the Catspeak parser.

# Comments

Comments in Catspeak are prefixed by `--`. This will ignore all of the
characters following it until a new line is reached:

```meow
-- this is a Catspeak comment!
```

Unlike GML, the Catspeak programming language **does not** include multi-line
comments. Use multiple comments instead:

```meow
-- comment
-- split
-- over multiple
-- lines
--
-- ~(￣▽￣)~*
```

# Identifiers

Mostly used for variable names; identifiers start with either a letter
(A&#8209;Z or a&#8209;z) or an underscore (`_`), followed by a sequence of other
letters, numbers, or underscores.

Examples of valid identifiers are:
```meow
bag_pipes
oneShot
__IMPALA_666__
abc123XYZ
```

_Identifiers **can not** start with numbers, e.g. `1st` is not a valid identifier._

# Keywords and Symbols

Keywords are special identifiers which are reserved for use by Catspeak, and
cannot be used as variables; these are:

 - `--`       see [Comments]
 - `:`        see [Struct Expressions]
 - `;`        
 - `do`       see [Block Expressions]
 - `if`       see [If Expressions]
 - `else`     see [If Expressions]
 - `while`    see [While Expressions]
 - `for`      (reserved in case of `for` loops)
 - `loop`     (reserved in case of infinite loops)
 - `with`     
 - `let`      see [Let Statements]
 - `fun`      see [Function Expressions]
 - `break`    see [Break Expressions]
 - `continue` see [Continue Expressions]
 - `return`   see [Return Expressions]
 - `impl`     (reserved in case of constructor functions)
 - `new`      
 - `self`     
 - `and`      
 - `or`       
 - `xor`      

If you ever need to use one of these keywords as a variable name, you should
use [Literal Identifiers](#literal-identifiers) instead.

# Raw Identifiers

Raw identifiers are a special type of identifier which start and end with a
backtick symbol (`` ` ``), for example:

```meow
let `1st-of-march` = "2022-03-01"
```

`1st-of-march` is not a valid identifier, but it is a valid **raw identifier**.

You can use any non-whitespace, non-backtick character between the backticks.

# Operators